local vim = vim
local Plug = vim.fn['plug#']

-- Set leader keys
vim.g.mapleader = ' '
vim.g.maplocalleader = ' '

-- Plugins
vim.call('plug#begin')
Plug('nvim-treesitter/nvim-treesitter', {['do'] = ':TSUpdate'})
Plug('nvim-lua/plenary.nvim')
Plug('nvim-telescope/telescope.nvim', {['tag'] = '0.1.8'})
Plug('neovim/nvim-lspconfig')
Plug('hrsh7th/cmp-nvim-lsp')
Plug('hrsh7th/nvim-cmp')
Plug('nvim-tree/nvim-web-devicons')
Plug('romgrk/barbar.nvim')
Plug('nvim-lualine/lualine.nvim')
Plug('navarasu/onedark.nvim')
vim.call('plug#end')

-- Treesitter configuration
require('nvim-treesitter.configs').setup {
    ensure_installed = { 'c', 'asm' },
    highlight = { enable = true, additional_vim_regex_highlighting = false },
    incremental_selection = { enable = true },
    indent = { enable = true },
}

-- Theme setup (onedark with customizations)
require('onedark').setup {
    style = 'darker',
    transparent = false,
    term_colors = true,
    ending_tildes = true,
    cmp_itemkind_reverse = false,
    code_style = {
        comments = 'italic',
        keywords = 'bold',
        functions = 'none',
        strings = 'none',
        variables = 'none'
    },
    colors = {
        bg0 = '#1e222a',
        fg = '#abb2bf',
        purple = '#c678dd',
        green = '#98c379',
        orange = '#d19a66',
        blue = '#61afef',
        yellow = '#e5c07b',
        cyan = '#56b6c2',
        red = '#e06c75',
    },
    highlights = {
        CursorLine = { bg = '#2c323c' },
        Visual = { bg = '#3e4451' },
        Pmenu = { bg = '#2c323c', fg = '#abb2bf' },
        PmenuSel = { bg = '#61afef', fg = '#1e222a' },
    },
}
require('onedark').load()

-- General settings
vim.opt.termguicolors = true
vim.opt.background = 'dark'
vim.opt.tabstop = 4
vim.opt.shiftwidth = 4
vim.opt.expandtab = true
vim.opt.number = true
vim.opt.relativenumber = true
vim.opt.autoindent = true
vim.opt.cursorline = true
vim.opt.showtabline = 0
vim.opt.signcolumn = 'yes'
vim.opt.updatetime = 250
vim.opt.timeoutlen = 300
vim.opt.clipboard = 'unnamedplus'

-- Disable expandtab for assembly files
vim.api.nvim_create_autocmd("FileType", {
    pattern = "asm",
    callback = function() vim.bo.expandtab = false end,
})

-- LSP setup
local lspconfig = require('lspconfig')
local cmp_nvim_lsp = require('cmp_nvim_lsp')
local cmp = require('cmp')

lspconfig.clangd.setup {
    capabilities = cmp_nvim_lsp.default_capabilities(),
    filetypes = { 'c', 'cpp' },
}

lspconfig.asm_lsp.setup {
    capabilities = cmp_nvim_lsp.default_capabilities(),
    filetypes = { 'asm' },
}

-- nvim-cmp setup
cmp.setup {
    mapping = {
        ['<C-Space>'] = cmp.mapping.complete(),
        ['<CR>'] = cmp.mapping.confirm({ select = true }),
        ['<C-k>'] = cmp.mapping.select_prev_item(),
        ['<C-j>'] = cmp.mapping.select_next_item(),
        ['<C-u>'] = cmp.mapping.scroll_docs(-4),
        ['<C-d>'] = cmp.mapping.scroll_docs(4),
    },
    sources = {
        { name = 'nvim_lsp', priority = 1000 },
        { name = 'buffer', priority = 500 },
        { name = 'path', priority = 250 },
    },
    formatting = {
        format = function(entry, vim_item)
            vim_item.menu = ({
                nvim_lsp = '[LSP]',
                buffer = '[Buffer]',
                path = '[Path]',
            })[entry.source.name]
            return vim_item
        end,
    },
    experimental = { ghost_text = true },
}

-- Barbar configuration (optional)
vim.g.bufferline = {
    animation = true,
    auto_hide = false,
    tabpages = false,
    clickable = true,
    icons = {
        buffer_index = false,
        buffer_number = false,
        filetype = {
            enabled = true,
        },
        separator = { left = '▎', right = '' },
        modified = { button = '●' },
        pinned = { button = '車', filename = true, separator = { left = '', right = '' } },
        close_button = '',
    },
    maximum_padding = 2,
    minimum_padding = 1,
    icon_custom_colors = false,
    insert_at_end = true,
    semantic_letters = true,
}

-- Lualine configuration
require('lualine').setup {
    options = {
        theme = 'onedark',
        icons_enabled = true,
        globalstatus = true,
    },
    sections = {
        lualine_a = { 'mode' },
        lualine_b = { 'branch', 'diff' },
        lualine_c = { 'filename' },
        lualine_x = { 'encoding', 'fileformat', 'filetype' },
        lualine_y = { 'progress' },
        lualine_z = { 'location' }
    },
}

-- Keybindings

-- Buffer navigation (Barbar)
vim.keymap.set('n', '<Tab>', '<Cmd>BufferNext<CR>', { desc = 'Next buffer' })
vim.keymap.set('n', '<S-Tab>', '<Cmd>BufferPrevious<CR>', { desc = 'Previous buffer' })
vim.keymap.set('n', '<leader>x', '<Cmd>BufferClose<CR>', { desc = 'Close buffer' })
vim.keymap.set('n', '<leader>tn', '<Cmd>enew<CR>', { desc = 'New buffer' })

-- Telescope
vim.keymap.set('n', '<leader>ff', require('telescope.builtin').find_files, { desc = 'Find files' })
vim.keymap.set('n', '<leader>fg', require('telescope.builtin').live_grep, { desc = 'Live grep' })
vim.keymap.set('n', '<leader>fb', require('telescope.builtin').buffers, { desc = 'Buffers' })

-- LSP
vim.keymap.set('n', '<leader>ld', vim.lsp.buf.definition, { desc = 'Go to definition' })
vim.keymap.set('n', '<leader>lD', vim.lsp.buf.declaration, { desc = 'Go to declaration' })
vim.keymap.set('n', '<leader>lf', vim.lsp.buf.format, { desc = 'Format code' })

-- Diagnostics
vim.keymap.set('n', '<leader>de', vim.diagnostic.open_float, { desc = 'Show diagnostics' })
vim.keymap.set('n', '<leader>dn', vim.diagnostic.goto_next, { desc = 'Next diagnostic' })
vim.keymap.set('n', '<leader>dp', vim.diagnostic.goto_prev, { desc = 'Previous diagnostic' })

-- Signature help
vim.keymap.set('i', '<C-s>', vim.lsp.buf.signature_help, { desc = 'Signature help' })

